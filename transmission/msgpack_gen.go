package transmission

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import "github.com/tinylib/msgp/msgp"

// DecodeMsg implements msgp.Decodable
func (z *EventSlice) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(EventSlice, zb0002)
	}
	for zb0001 := range *z {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(Event)
			}
			err = (*z)[zb0001].DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z EventSlice) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0003 := range z {
		if z[zb0003] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z[zb0003].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0003)
				return
			}
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z EventSlice) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		if z[zb0003] == nil {
			s += msgp.NilSize
		} else {
			s += z[zb0003].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MsgpackErrorResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "error":
			z.ErrorStr, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ErrorStr")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MsgpackErrorResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "error"
	err = en.Append(0x81, 0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.ErrorStr)
	if err != nil {
		err = msgp.WrapError(err, "ErrorStr")
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MsgpackErrorResponse) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.ErrorStr)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MsgpackEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "time":
			err = dc.ReadExtension(&z.Timestamp)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "samplerate":
			z.SampleRate, err = dc.ReadUint()
			if err != nil {
				err = msgp.WrapError(err, "SampleRate")
				return
			}
		case "data":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
			if z.Data == nil {
				z.Data = make(map[string]interface{}, zb0002)
			} else if len(z.Data) > 0 {
				for key := range z.Data {
					delete(z.Data, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 interface{}
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Data")
					return
				}
				za0002, err = dc.ReadIntf()
				if err != nil {
					err = msgp.WrapError(err, "Data", za0001)
					return
				}
				z.Data[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MsgpackEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "time"
	err = en.Append(0x83, 0xa4, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	// write "samplerate"
	err = en.Append(0xaa, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint(z.SampleRate)
	if err != nil {
		err = msgp.WrapError(err, "SampleRate")
		return
	}
	// write "data"
	err = en.Append(0xa4, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Data)))
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	for za0001, za0002 := range z.Data {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Data")
			return
		}
		err = en.WriteIntf(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Data", za0001)
			return
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MsgpackEvent) Msgsize() (s int) {
	s = 1 + 5 + msgp.ExtensionPrefixSize + z.Timestamp.Len() + 11 + msgp.UintSize + 5 + msgp.MapHeaderSize
	if z.Data != nil {
		for za0001, za0002 := range z.Data {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.GuessSize(za0002)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MsgpackResponseSlice) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(MsgpackResponseSlice, zb0002)
	}
	for zb0001 := range *z {
		var field []byte
		_ = field
		var zb0003 uint32
		zb0003, err = dc.ReadMapHeader()
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		for zb0003 > 0 {
			zb0003--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			switch msgp.UnsafeString(field) {
			case "error":
				(*z)[zb0001].ErrorStr, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, zb0001, "ErrorStr")
					return
				}
			case "status":
				(*z)[zb0001].Status, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, zb0001, "Status")
					return
				}
			default:
				err = dc.Skip()
				if err != nil {
					err = msgp.WrapError(err, zb0001)
					return
				}
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MsgpackResponseSlice) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004 := range z {
		// map header, size 2
		// write "error"
		err = en.Append(0x82, 0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72)
		if err != nil {
			return
		}
		err = en.WriteString(z[zb0004].ErrorStr)
		if err != nil {
			err = msgp.WrapError(err, zb0004, "ErrorStr")
			return
		}
		// write "status"
		err = en.Append(0xa6, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
		if err != nil {
			return
		}
		err = en.WriteInt(z[zb0004].Status)
		if err != nil {
			err = msgp.WrapError(err, zb0004, "Status")
			return
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MsgpackResponseSlice) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0004 := range z {
		s += 1 + 6 + msgp.StringPrefixSize + len(z[zb0004].ErrorStr) + 7 + msgp.IntSize
	}
	return
}
